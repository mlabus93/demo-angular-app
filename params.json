{
  "name": "Demo Angular App",
  "tagline": "Demo app with best practices for angular 1.x",
  "body": "# VTS GUI Coding Guidelines\r\n\r\n## Summary\r\n\r\nThis will provide the basis for organization, structure and best practices for an AngularJS 1.x application. This guide borrows heavily from John Papa's (@johnpapa) guide, which can be viewed here: https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md\r\n\r\n## Table of Contents\r\n\r\n1. [Naming Conventions](#naming-conventions)\r\n1. [Project Organization](#project-organization)\r\n1. [Modules](#modules)\r\n1. [Controllers](#controllers)\r\n1. [Services and Factories](#services-and-factories)\r\n1. [Directives](#directives)\r\n1. [Lazyload](#lazyload)\r\n1. [Routing](#routing)\r\n1. [Unit Tests](#unit-tests)\r\n1. [License](#license)\r\n\r\n## Naming Conventions\r\nAll naming should describe the specific component or file being used.\r\n\r\n### Components\r\n - Controllers and Services should be named in Pascal case and suffixed with their respective component type.\r\n\r\n > ExampleCtrl, SomeTestSvc\r\n\r\n - Module names should be camel cased.  \r\n `angular.module('someTestApp', []);`\r\n\r\n - Submodules should be prefixed with their parent module using dot syntax.  \r\n `angular.module('app', ['app.routes']);`\r\n\r\n - Directives should be prefixed to avoid collisions with future html or angular specs.  \r\n `.directive('vtcCarousel', vtcCarousel) <vtc-carousel> </vtc-carousel>`\r\n\r\n### Files\r\n - All file names should use camel casing.\r\n\r\n - For Angular files, suffix the file with the type of component it is.\r\n\r\n > 'ExampleCtrl' should be named example.ctrl.js  \r\n   'SomeTestSvc' should be named someTest.svc.js  \r\n   'app' module should be named app.module.js\r\n\r\n - Submodules should leave out the prefix during file naming.\r\n\r\n > 'app.routes' should be named routes.module.js\r\n\r\n - Config blocks should be named based off of their module name.\r\n \r\n > 'exampleModule' should have a config file named exampleModule.config.js\r\n\r\n## Project Organization\r\n\r\n - There should be a working directory for app development and a directory specific for dist.\r\n\r\n - Inside of the working directory, there should be a folder for features of the project. This folder contains subfolders for all the features and each feature should have it's own module.\r\n\r\n - All of the components (controllers, services, config, etc.) and markup (html) of the module should be kept in the specific feature's directory.\r\n\r\n - Each component should exist in it's own file independent of other components. The only exceptions would be including run blocks after a config or providers with config.\r\n\r\n - Each angular component file should be wrapped in an IIFE (Immediately Invoked Function Expression) to avoid pollution to the global scope. Additionally, use strict mode inside of each angular component file.\r\n ```javascript\r\n    (function() {\r\n      'use strict';\r\n    })();\r\n ```\r\n\r\n - There are vendor.json and vendor.base.json config files used for including scripts and libraries. The vendor.json file pulls the specified files from bower_components and copies them to a vendor folder in the dist folder. These files are used for lazyloading modules into the application. The vendor.base.json file includes the script files that are required for the application to initially run. This would include the AngularJS and jQuery libraries, as well as other startup dependencies. These files are concatenated into a base.js file that is placed in the dist/js folder and included in the index.html file.\r\n\r\n - The app folder files get copied to dist with a gulp task that groups them by file types. The js files get concatenated into one file called app.js in the dist/js folder.\r\n\r\n## Modules\r\n - There should be a main application module for 'glueing' the app together, a core features module for common modules that can be used across apps (angular modules, logger, exception handling, routing, lazyload), and individual features modules for the specific application features.  \r\n ```javascript\r\n    angular.module('app.feature1', [\r\n      'app.core'\r\n    ]);\r\n ```\r\n\r\n ```javascript\r\n    angular.module('app.core', [\r\n      'ngAnimate',\r\n      'blocks.logger',\r\n      'blocks.exception'\r\n    ]);\r\n ```\r\n\r\n ```javascript\r\n    angular.module('app', [\r\n      'app.core',\r\n      'app.feature1'\r\n    ]);\r\n ```\r\n - Modules should be defined with setter syntax.\r\n\r\n `angular.module('app', []);`\r\n\r\n - Modules should be retrieved with getter syntax.\r\n ```javascript\r\n    angular\r\n      .module('app')\r\n      .controller('AttachedToAppCtrl', AttachedToAppCtrl);\r\n ```\r\n\r\n - Pass in named functions to components so they are easier to read and debug (as shown above).\r\n\r\n - When injecting into components, use the '$inject' function to keep the code safe when minifying.\r\n ```javascript\r\n    .controller('DemoCtrl', DemoCtrl);\r\n\r\n    DemoCtrl.$inject = ['InjectedSvc', '$log'];\r\n    function DemoCtrl(InjectedSvc, $log) {\r\n      var vm = this;\r\n    }\r\n ```\r\n\r\n## Controllers\r\n\r\n - Controllers should be used as 'the glue' between your view model. Logic in controllers should be extracted and placed inside of a service.\r\n\r\n - Use the 'controller as' syntax for views. Explicit naming in the view allows easy identification of a controller context, especially when controllers are nested.\r\n ```html\r\n    <div ng-controller=\"SomeCtrl as SomeCtrl\">\r\n      <h1>{{ SomeCtrl.title }}</h1>\r\n      <div ng-controller=\"NestedCtrl as NestedCtrl>\r\n        <input ng-model=\"NestedCtrl.value\"/>\r\n        <h5>{{ NestedCtrl.value }}</h5>\r\n        <p>{{ SomeCtrl.valueFromParent }}</p>\r\n      </div>\r\n    </div>\r\n ```\r\n\r\n - Use the ui-router to assign controllers to views. If no route is associated with the view, then use the above 'ng-controller' directive.\r\n ```javascript\r\n    .state('app.home', {\r\n      url: '/home',\r\n      templateUrl: '/home.html',\r\n      controller: 'HomeCtrl',\r\n      controllerAs: 'HomeCtrl'\r\n    });\r\n ```\r\n\r\n - Use 'controller as' syntax for controller js by binding 'this' to a variable (this isn't used directly because of lexical issues in javascript). This helps prevent the urge to bind everything to $scope.\r\n ```javascript\r\n    angular\r\n      .module('app.home')\r\n      .controller('HomeCtrl', HomeCtrl);\r\n\r\n    function HomeCtrl() {\r\n      var vm = this; //vm is short for view model\r\n    }\r\n ```\r\n\r\n - Bindable members should be kept at the top with function definitions placed below in alphabetical order for readability.\r\n\r\n - An 'activate' or 'init' function should be specified for controllers that need to perform work upon initialization.\r\n ```javascript\r\n    ExampleCtrl.$inject = ['SomeSvc', 'FilterSvc'];\r\n    function ExampleCtrl(SomeSvc, FilterSvc) {\r\n      var vm = this;\r\n      vm.filteredItems = [];\r\n      vm.items = [];\r\n      vm.value = '';\r\n      // binded functions\r\n      vm.doTask = doTask;\r\n      vm.filterItems = filterItems;\r\n\r\n      activate();\r\n\r\n      function activate() {\r\n        SomeSvc.doSomethingInitially();\r\n      }\r\n\r\n      function doTask() {\r\n        vm.value = 'Task completed';\r\n      }\r\n\r\n      function filterItems() {\r\n        vm.filteredItems = FilterSvc.filterItemList(vm.items);\r\n      }\r\n    }\r\n ```\r\n\r\n## Services and Factories\r\n\r\n - Services and factories in angular are singletons. Since the two are so similar, use factories for consistency.\r\n ```javascript\r\n    angular\r\n      .module('app.auth')\r\n      .factories('AuthSvc', AuthSvc);\r\n ```\r\n\r\n - Factories should have a single responsibility.\r\n\r\n - As with controllers, accessible members should be placed up top (in a service variable to be returned). Their function declarations should be placed below in alphabetical order.\r\n ```javascript\r\n    angular\r\n      .module('app.auth')\r\n      .factory('AuthSvc', AuthSvc);\r\n\r\n    AuthSvc.$inject = ['$http'];\r\n    function AuthSvc($http) {\r\n      var service = {\r\n        getRole: getRole,\r\n        login: login,\r\n        logout: logout\r\n      };\r\n      return service;\r\n      \r\n      function getRole() {\r\n      }\r\n\r\n      function login() {\r\n      }\r\n\r\n      function logout() {\r\n      }\r\n    }\r\n ```\r\n\r\n## Directives\r\n\r\n - Directives should be used when manipulating the DOM directly, unless CSS or angular directives can be used.\r\n\r\n - Use the restrict property with element and/or attribute and avoid class and comment.\r\n ```javascript\r\n    .directive('vtsCalendar', vtsCalendar);\r\n\r\n    function vtsCalendar() {\r\n      var directive = {\r\n        link: link,\r\n        templateUrl: 'vtsCalendar.html',\r\n        restrict: 'EA',\r\n        controller: 'TestCtrl',\r\n        controllerAs: 'TestCtrl'\r\n      };\r\n      return directive;\r\n\r\n      function link(scope, element, attrs) {\r\n      }\r\n    }\r\n ```\r\n\r\n - Use controllerAs for directives for consistency (shown above).\r\n\r\n## Lazyload\r\n\r\n*** TODO ***\r\n\r\n## Routing\r\n\r\n*** TODO ***\r\n\r\n## Unit Tests\r\n\r\n - Each angular component file should have it's own test associated with it.  \r\n > example.ctrl.js with test file example.ctrl.spec.js\r\n\r\n - All test files should use the Jasmine testing framework and should be written in BDD/TDD style.\r\n\r\n - Each unit test should test the specified component in isolation, with injected dependencies being mocked.\r\n\r\n - 'beforeEach' and 'afterEach' blocks should be used for any work needed to be done prior to and after tests, such as injections and cleaning up.\r\n\r\n - When injecting into tests, wrap the item in underscores so a variable of the same name can be used to assign to it. Angular automatically strips the underscores and it is convention to include the underscores.  \r\n ```javascript\r\n    var SomeSvc;\r\n    beforeEach(inject(function(_SomeSvc_) {\r\n      SomeSvc = _SomeSvc_;\r\n    }));\r\n ```\r\n\r\n - The unit test should start with a describe block naming the component being tested and checking if it is defined. There should be nested describe blocks for each function and 'it' blocks describing each test. An example is shown below:\r\n ```javascript\r\n    // test.ctrl.js\r\n    angular\r\n      .module('app.test')\r\n      .controller('TestCtrl', TestCtrl);\r\n\r\n    function TestCtrl() {\r\n      var vm = this;\r\n      vm.items = [];\r\n      vm.setItems = setItems;\r\n\r\n      function setItems() {\r\n        vm.items = [{id: 1, name: 'one'}, {id: 2, name: 'two'}];\r\n      }\r\n    }\r\n ```\r\n ```javascript\r\n    // test.ctrl.spec.js\r\n    describe('TestCtrl', function() {\r\n      var $controller, vm;\r\n\r\n      beforeEach(module('app.test'));\r\n      beforeEach(inject(function(_$controller_) {\r\n        $controller = _$controller_;\r\n        vm = $controller('TestCtrl');\r\n      }));\r\n\r\n      it('should be defined', function() {\r\n        expect(vm).toBeDefined();\r\n      });\r\n\r\n      describe('setItems function', function() {\r\n        it('should exist', function() {\r\n          expect(vm.setItems).toBeDefined();\r\n        });\r\n\r\n        it('should assign two items when called', function() {\r\n          vm.setItems();\r\n          expect(vm.items.length).toEqual(2);\r\n        });\r\n      });\r\n    });\r\n ```\r\n\r\n## License\r\n\r\n - Since this guide includes many practices from John Papa's (@johnpapa) guide, I have included his license.\r\n\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2014-2016 John Papa\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n\r\n### Authors and Contributors\r\nMike Labus (@mlabus93)",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}